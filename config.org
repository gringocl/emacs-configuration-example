#+title: Emacs Config
#+startup: overview
#+TODO: DISABLED

* Initial packages

The two packages are the first to load in the configuration

** Leader Key

#+begin_src emacs-lisp
(use-package leader-key
  :ensure (leader-key :host github :repo "aaronjensen/emacs-leader-key" :protocol ssh :wait t)
  :demand t
  :config
  (leader-key-init)

  (leader-key-declare-prefix "a" "apps" "Applications")
  (leader-key-declare-prefix "b" "buffers" "Buffers")
  (leader-key-declare-prefix "e p" "profiler" "Profiler")
  (leader-key-declare-prefix "e" "emacs" "Emacs")
  (leader-key-declare-prefix "f" "files" "Files")
  (leader-key-declare-prefix "g" "git" "Git")
  (leader-key-declare-prefix "h" "help" "Help")
  (leader-key-declare-prefix "j" "journal" "Journal")
  (leader-key-declare-prefix "l" "layouts" "Layouts")
  (leader-key-declare-prefix "m" "major" "Major Mode")
  (leader-key-declare-prefix "n" "notes" "Notes")
  (leader-key-declare-prefix "o" "org" "Org Mode")
  (leader-key-declare-prefix "p" "projects" "Projects")
  (leader-key-declare-prefix "q" "quit" "Quit Emacs")
  (leader-key-declare-prefix "r" "error" "Error")
  (leader-key-declare-prefix "S" "flyspell" "Flyspell")
  (leader-key-declare-prefix "s" "search" "Search")
  (leader-key-declare-prefix "T" "toggle" "Toggle")
  (leader-key-declare-prefix "u" "C-u" "Universal Argument")
  (leader-key-declare-prefix "w" "windows" "Windows")

  (leader-key-set
   "b b" #'consult-buffer
   "h k" #'describe-key
   "h v" #'describe-variable
   "h f" #'describe-function
   "g g" #'magit-status
   "f f" #'find-file
   "x" #'execute-extended-command
   "e l" #'find-library
   "q r" #'restart-emacs
   "T w" #'visual-line-mode))
#+end_src

** Compdef

Add =:capf= and =:compdef= to =use-package=.

#+begin_src emacs-lisp
(use-package compdef
  :ensure (:wait t))
#+end_src

* Package Management

** Use Package

Install packages by default when configured with use-package.

#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

Macro to use to configure built-in features, rather than packages that do not need to be installed

#+begin_src emacs-lisp
(defmacro use-feature (name &rest args)
  "`use-package' with package installation (`ensure') disabled."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))
#+end_src

* Base Settings

** General

#+begin_src emacs-lisp
  (setq initial-buffer-choice
    (lambda () (get-buffer "*Messages*")))
;:(setq initial-buffer-choice "~/code/personal/emacs-configuration-example/config.org")
  (setq create-lock-files nil)
#+end_src

** Pin Entry

#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+end_src

** Customization Saving

Do not save customizations in =init.el=, instead save them in a temporary file
that will be discarded. As a result, any customizations made in a session will
not be persisted across sessions.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name
                   (format "custom-%d-%d.el" (emacs-pid) (random))
                   temporary-file-directory))
#+end_src

** No Littering

Move all common files typically written to the =user-emacs-directory= to the =var=
and =etc= subdirectories so that they can be included in =.gitignore=

#+begin_src emacs-lisp
(use-package no-littering
  :ensure (:wait t))
#+end_src

** Minibuffer

Support opening new minibuffers from inside existing minibuffers.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** Save History

#+begin_src emacs-lisp
(use-feature savehist
  :init
  (savehist-mode))
#+end_src

** Backup and Auto-Save

Put backup files and auto-save files in var directory, rather than alongside the
original files.

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(no-littering-expand-var-file-name "backup/"))))
(add-hook 'elpaca-after-init-hook
          (lambda ()
            (setq auto-save-list-file-prefix (no-littering-expand-var-file-name "auto-save/sessions/")
                  auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))))
#+end_src

When paths are too long, there can be errors when auto-save and backup filenames
are generated. This uses a consistent hash, rather than the full path to
generate the filenames. This is taken from Doom Emacs.
#+begin_src emacs-lisp
(defun c/make-auto-save-file-name-hashed (fn)
  "Compress the auto-save file name so paths don't get too long."
  (let ((buffer-file-name
         (if (or (null buffer-file-name)
                 (find-file-name-handler buffer-file-name 'make-auto-save-file-name))
             buffer-file-name
           (sha1 buffer-file-name))))
    (funcall fn)))
(advice-add #'make-auto-save-file-name :around #'c/make-auto-save-file-name-hashed)

(defun c/make-backup-file-name-hashed (fn file)
  "A few places use the backup file name so paths don't get too long."
  (let ((alist backup-directory-alist)
        backup-directory)
    (while alist
      (let ((elt (car alist)))
        (if (string-match (car elt) file)
            (setq backup-directory (cdr elt) alist nil)
          (setq alist (cdr alist)))))
    (let ((file (funcall fn file)))
      (if (or (null backup-directory)
              (not (file-name-absolute-p backup-directory)))
          file
        (expand-file-name (sha1 (file-name-nondirectory file))
                          (file-name-directory file))))))
(advice-add #'make-backup-file-name-1 :around #'c/make-backup-file-name-hashed)
#+end_src

* Evil

** Evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (setq evil-disable-insert-state-bindings t))
#+end_src

** Evil Org

#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode))
#+end_src

** Evil Escape

#+begin_src emacs-lisp
(use-package evil-escape
  :after evil
  :hook (pre-command . evil-escape-mode)
  :init
  (setq evil-escape-key-sequence "jk"
        evil-escape-delay 0.2)
  (evil-define-key* '(insert replace visual operator) 'global "\C-g" #'evil-escape))
#+end_src

** Evil Collection

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

* User Interface

** Font Size

#+begin_src emacs-lisp
(use-feature emacs
  :bind (("s-=" . #'global-text-scale-adjust)
         ("s--" . #'global-text-scale-adjust)
         ("s-0" . #'global-text-scale-adjust)
         ("C-=" . #'text-scale-adjust)
         ("C--" . #'text-scale-adjust)
         ("C-0" . #'text-scale-adjust))

  :preface
  (defvar presentation-mode-font-size 21)
  (defun presentation-mode ()
    "Increase the font size for presentation."
    (interactive)
    (let* ((current-font-size (/ (face-attribute 'default :height) 10))
           (new-font-size
            (if (not (eq current-font-size presentation-mode-font-size))
                presentation-mode-font-size
              c/monospace-font-size)))
      (set-face-attribute 'default nil :height (* new-font-size 10))
      (set-face-attribute 'variable-pitch nil :height (* new-font-size 10))
      (redisplay 'force))))
#+end_src

** Full Screen

#+begin_src emacs-lisp
(setq toggle-frame-maximized t)
#+end_src

** Completion Menu (Vertico)

#+begin_src emacs-lisp
(use-package vertico
  :config
  (vertico-mode))
#+end_src

** Completion At Point

*** Ripgrep Completion-at-Point Function

#+begin_src emacs-lisp
(use-package ripgrep-capf
  :after cape
  :ensure (:host github :repo "aaronjensen/ripgrep-capf" :protocol ssh)
  :init
  (defalias 'capf-dabbrev-ripgrep (cape-capf-super #'cape-dabbrev #'ripgrep-capf)))
#+end_src

*** Additional Completion-at-Point Functions (cape)

#+begin_src emacs-lisp
(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  :config
  (setq cape-dabbrev-check-other-buffers nil))
#+end_src

*** Inline Completion

#+begin_src emacs-lisp
(use-package corfu
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("C-n" . nil)
        ("C-p" . nil)
        ([remap next-line] . nil)
        ([remap previous-line] . nil)
        ([remap move-end-of-line] . nil)
        ([remap move-beginning-of-line] . nil)
        ("\r" . nil)
        ("<escape>" . corfu-quit))
  :init
  ;; Tab will trigger completion if it does not need to indent
  (setq tab-always-indent 'complete)
  ;; Disable text-mode ispell completion at point function
  (setq text-mode-ispell-word-completion nil)
  ;; TAB-and-Go customizations
  (setq
   ;; Enable cycling for `corfu-next/previous'
   corfu-cycle t
   corfu-preselect 'prompt)
  ;; Auto completion
  (setq
   corfu-auto t
   corfu-auto-prefix 2
   corfu-auto-delay 0.1)
  :config
  (corfu-history-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
(use-package consult
  :bind (("C-x b" . consult-buffer)))
#+end_src

** Completion Style (Orderless)

The orderless completion style allows typing parts of what is being matched,
separated by spaces. For example, "som thi" will match "this-is-some-thing".

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Minibuffer Annotations (Marginalia)

#+begin_src emacs-lisp
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
              ("M-A" . marginalia-cycle))

  :config
  (marginalia-mode))
#+end_src

** DISABLED Miniframe

#+begin_src emacs-lisp
(use-package mini-frame
  :config
  (custom-set-variables
   '(mini-frame-show-parameters
     '((top . 1.0)
       (width . 1.0)
       (left . 0.5)
       (height . 5)
       (left-fringe . 12)
       (right-fringe . 12)
                                        ;(top-fringe . 12)
                                        ;(bottom-fringe .12)
       (child-frame-border-width . 1)
       (internal-border-width . 1)))
   '(mini-frame-color-shift-step 7))
  (setq mini-frame-internal-border-color "black")
  :init
  (mini-frame-mode))
#+end_src

** Minibuffer Actions Rooted in Keybindings (Embark)

#+begin_src emacs-lisp
(use-package embark
  :bind (:map
         vertico-map
         ("C-c C-o" . #'embark-export)
         ("C-c C-c" . #'embark-act)
         ("C-c C-e" . #'c/embark-export-wgrep))
  :preface
  (defvar c/embark-export-wgrep nil)
  (defun c/embark-export-wgrep ()
    "Embark export then wgrep"
    (interactive)
    (setq c/embark-export-wgrep t)
    (command-execute #'embark-export)))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  :config
  (declare-function wgrep-change-to-wgrep-mode "ext:wgrep")
  (defun c/embark-export-grep-wgrep (&rest _)
    "Start wgrep when indicated"
    (when c/embark-export-wgrep
      (setq c/embark-export-wgrep nil)
      (when (eq major-mode 'grep-mode)
        (wgrep-change-to-wgrep-mode))))
  (advice-add #'embark-consult-export-grep :after #'c/embark-export-grep-wgrep))
#+end_src

* Text Editing

** Delete Trailing Whitespace

#+begin_src emacs-lisp
(use-package ws-butler
  :config (ws-butler-global-mode))
#+end_src

** Spell Checking (Flyspell)

#+begin_src emacs-lisp
(use-feature flyspell
  :hook ((org-mode git-commit-mode markdown-mode) . flyspell-mode)

  :config
  (setq flyspell-issue-message-flag nil
        flyspell-issue-welcome-flag nil))
#+end_src

** Editing Search Results (wgrep)

#+begin_src emacs-lisp
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t))
#+end_src

* Projects

** Tree View (Treemacs)

#+begin_src emacs-lisp
(use-package treemacs
  :bind ("s-b" . #'treemacs)
  :config
  (treemacs-follow-mode))
#+end_src

** Workspaces (Tabspaces)

#+begin_src emacs-lisp
(use-package tabspaces
  :after consult

  :init
  (setq tabspaces-session-file (no-littering-expand-var-file-name "tabsession.el")
        tabspaces-project-switch-commands #'project-find-file)

  (tabspaces-mode)

  :config
  (consult-customize consult--source-buffer :hidden t :default nil)

  ;; set consult-workspace buffer list
  (defvar consult--source-workspace
    (list :name "Workspace Buffers"
          :narrow ?w
          :history 'buffer-name-history
          :category 'buffer
          :state #'consult--buffer-state
          :default t
          :items (lambda () (consult--buffer-query
                             :predicate #'tabspaces--local-buffer-p
                             :sort 'visibility
                             :as #'buffer-name)))

    "Set workspace buffer list for consult-buffer.")
  (add-to-list 'consult-buffer-sources 'consult--source-workspace))
#+end_src

* File Types

** Defaults

*** Indentation

Two space indentation by default.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil
              tab-width 2
              smie-indent-basic 2)
#+end_src

** Shell

#+begin_src emacs-lisp
(use-feature shell
  :config
  (setq sh-basic-offset 2))
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :config

  (add-hook 'markdown-mode-hook #'visual-line-mode)
  (add-hook 'markdown-mode-hook #'visual-wrap-prefix-mode)

  (setq markdown-list-indent-width 2))
#+end_src

** Ruby

#+begin_src emacs-lisp
(use-feature ruby-mode
  :hook (ruby-mode . corfu-mode)
  :capf capf-dabbrev-ripgrep
  :config
  (setq ruby-block-indent nil
        ruby-method-call-indent nil
        ruby-method-params-indent nil
        ruby-after-operator-indent nil
        ruby-bracketed-args-indent nil))
#+end_src

* Version Control

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

Install latest version of transient, as the version included in Emacs is not recent enough.

#+begin_src emacs-lisp
(use-package transient)
#+end_src

Start git commit in insert mode

#+begin_src emacs-lisp
(use-package git-commit
  :after magit
  :config
  (add-hook 'git-commit-setup-hook
            (defun +vc-start-in-insert-state-maybe-h ()
              "Start git-commit-mode in insert state if in a blank commit message, otherwise in default state."
              (when (and (bound-and-true-p evil-local-mode)
                         (not (evil-emacs-state-p))
                         (bobp) (eolp))
                (evil-insert-state)))))
#+end_src

* Assistance

** Which Key

#+begin_src emacs-lisp
(use-feature which-key
  :config
  (which-key-mode))
#+end_src

** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :hook (helpful-mode . visual-line-mode)
    :bind (
           ;; Remap standard commands
           ([remap describe-function] . #'helpful-callable)
           ([remap describe-command] . #'helpful-command)
           ([remap describe-variable] . #'helpful-variable)
           ([remap describe-symbol] . #'helpful-symbol)
           ([remap describe-key] . #'helpful-key)))
#+end_src

* LLM Chat

** DISABLED gptel

#+begin_src emacs-lisp
(use-package gptel
  :config
  (defun ms/load-anthropic-key ()
    (gptel-api-key-from-auth-source "api.anthropic.com"))

  (gptel-make-anthropic "Claude"
                        :stream t
                        :key #'ms/load-anthropic-key
                        :models '(claude-3-5-sonnet-20241022))

  (setq
   gptel-model "mistral-nemo:12b"
   gptel-backend (gptel-make-ollama "Ollama"
                                    :host "ollama.diffusenebula.org"
                                    :stream t
                                    :models '(mistral-nemo:12b
                                              mistral-nemo:12b-instruct-2407-q6_K))))
#+end_src


#+begin_src emacs-lisp
(use-package whisper
  :ensure (:host github :repo "natrys/whisper.el" :protocol ssh :wait t)
  :bind ("C-H-r" . whisper-run)
  :config
  (setq whisper-install-directory "/tmp/"
        whisper-model "base"
        whisper-language "en"
        whisper-translate nil
        whisper-use-threads (/ (num-processors) 2)))


(defun rk/get-ffmpeg-device ()
  "Gets the list of devices available to ffmpeg.
The output of the ffmpeg command is pretty messy, e.g.
  [AVFoundation indev @ 0x7f867f004580] AVFoundation video devices:
  [AVFoundation indev @ 0x7f867f004580] [0] FaceTime HD Camera (Built-in)
  [AVFoundation indev @ 0x7f867f004580] AVFoundation audio devices:
  [AVFoundation indev @ 0x7f867f004580] [0] Cam Link 4K
  [AVFoundation indev @ 0x7f867f004580] [1] MacBook Pro Microphone
so we need to parse it to get the list of devices.
The return value contains two lists, one for video devices and one for audio devices.
Each list contains a list of cons cells, where the car is the device number and the cdr is the device name."
  (unless (string-equal system-type "darwin")
    (error "This function is currently only supported on macOS"))

  (let ((lines (string-split (shell-command-to-string "ffmpeg -list_devices true -f avfoundation -i dummy || true") "\n")))
    (cl-loop with at-video-devices = nil
             with at-audio-devices = nil
             with video-devices = nil
             with audio-devices = nil
             for line in lines
             when (string-match "AVFoundation video devices:" line)
             do (setq at-video-devices t
                      at-audio-devices nil)
             when (string-match "AVFoundation audio devices:" line)
             do (setq at-audio-devices t
                      at-video-devices nil)
             when (and at-video-devices
                       (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
             do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) video-devices)
             when (and at-audio-devices
                       (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
             do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) audio-devices)
             finally return (list (nreverse video-devices) (nreverse audio-devices)))))

(defun rk/find-device-matching (string type)
  "Get the devices from `rk/get-ffmpeg-device' and look for a device
matching `STRING'. `TYPE' can be :video or :audio."
  (let* ((devices (rk/get-ffmpeg-device))
         (device-list (if (eq type :video)
                          (car devices)
                        (cadr devices))))
    (cl-loop for device in device-list
             when (string-match-p string (cdr device))
             return (car device))))

(defcustom rk/default-audio-device nil
  "The default audio device to use for whisper.el and outher audio processes."
  :type 'string)

(defun rk/select-default-audio-device (&optional device-name)
  "Interactively select an audio device to use for whisper.el and other audio processes.
If `DEVICE-NAME' is provided, it will be used instead of prompting the user."
  (interactive)
  (let* ((audio-devices (cadr (rk/get-ffmpeg-device)))
         (indexes (mapcar #'car audio-devices))
         (names (mapcar #'cdr audio-devices))
         (name (or device-name (completing-read "Select audio device: " names nil t))))
    (setq rk/default-audio-device (rk/find-device-matching name :audio))
    (when (boundp 'whisper--ffmpeg-input-device)
      (setq whisper--ffmpeg-input-device (format ":%s" rk/default-audio-device)))))

#+end_src

* Undo

** Undo Fu Session

#+begin_src emacs-lisp
(use-package undo-fu-session
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
  (undo-fu-session-global-mode))
#+end_src

* Major Modes

** Org

#+begin_src emacs-lisp
(use-feature org-mode
  :hook (org-mode . corfu-mode)
  :init
  (setq org-edit-src-content-indentation 0))
#+end_src

* Minor Modes

** Parens

#+begin_src emacs-lisp
(use-package smartparens
  :config (smartparens-global-mode))
#+end_src

** Line Numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 't)  ; Options: 'relative, 't (absolute), 'visual
(setq display-line-numbers-width 3)         ; Adjust width of line number display
(setq display-line-numbers-grow-only t)     ; Prevent width from shrinking
#+end_src

* Terminal

** Terminal Emulator (vterm)

#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq vterm-always-compile-module t
        ;; Defaults to 0.1. Decreasing this greatly impacts performance of
        ;; rendering large batches of text.
        vterm-timer-delay 0.06))
#+end_src

*** Toggle

#+begin_src emacs-lisp
(use-package vterm-toggle
  :bind (("s-i" . vterm-toggle)))
#+end_src

* Startup Time

#+begin_src emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (let ((inhibit-message t))
              (message "Emacs init time: %s" (emacs-init-time)))))
#+end_src

#+title: Emacs Config
#+startup: overview
#+TODO: DISABLED


* Package Management

** Use Package

Install packages by default when configured with use-package.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Macro to use to configure built-in features, rather than packages that do not need to be installed

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "`use-package' with package installation (`ensure') disabled."
    (declare (indent defun))
    `(use-package ,name
       :ensure nil
       ,@args))
#+end_src

* Base Settings

** General

#+begin_src emacs-lisp
  (setq create-lock-files nil)
#+end_src

** Pin Entry

#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+end_src

** Customization Saving

Do not save customizations in =init.el=, instead save them in a temporary file
that will be discarded. As a result, any customizations made in a session will
not be persisted across sessions.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name
                     (format "custom-%d-%d.el" (emacs-pid) (random))
                     temporary-file-directory))
#+end_src

** No Littering

Move all common files typically written to the =user-emacs-directory= to the =var=
and =etc= subdirectories so that they can be included in =.gitignore=

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure (:wait t))
#+end_src

** Minibuffer

Support opening new minibuffers from inside existing minibuffers.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

Do not allow the cursor in the minibuffer prompt.

#+begin_src emacs-lisp
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** Save History

#+begin_src emacs-lisp
  (use-feature savehist
    :init
    (savehist-mode))
#+end_src

* Evil

** Evil 

#+begin_src emacs-lisp
  (use-package evil
    :init
    (evil-mode 1))
#+end_src

** Evil Org

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode))
#+end_src

** Evil Escape

#+begin_src emacs-lisp
  (use-package evil-escape
    :after evil
    :hook (pre-command . evil-escape-mode)
    :init
    (setq evil-escape-key-sequence "jk"
          evil-escape-delay 0.2)
    (evil-define-key* '(insert replace visual operator) 'global "\C-g" #'evil-escape))
#+end_src

* User Interface

** Font Size

#+begin_src emacs-lisp
(use-feature emacs
  :bind (("s-=" . #'global-text-scale-adjust)
         ("s--" . #'global-text-scale-adjust)
         ("s-0" . #'global-text-scale-adjust)
         ("C-=" . #'text-scale-adjust)
         ("C--" . #'text-scale-adjust)
         ("C-0" . #'text-scale-adjust))

  :preface
  (defvar presentation-mode-font-size 21)
  (defun presentation-mode ()
    "Increase the font size for presentation."
    (interactive)
    (let* ((current-font-size (/ (face-attribute 'default :height) 10))
           (new-font-size
            (if (not (eq current-font-size presentation-mode-font-size))
                presentation-mode-font-size
              c/monospace-font-size)))
      (set-face-attribute 'default nil :height (* new-font-size 10))
      (set-face-attribute 'variable-pitch nil :height (* new-font-size 10))
      (redisplay 'force))))
#+end_src

** Full Screen

#+begin_src emacs-lisp
(setq toggle-frame-maximized t)
#+end_src

** Completion Menu (Vertico)

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+end_src

** Completion In Region (Corfu)

#+begin_src emacs-lisp
  (use-package corfu
    :init
    (global-corfu-mode))

  (use-feature emacs
    :custom
    (tab-always-indent 'complete))
#+end_src
     
** Consult

#+begin_src emacs-lisp
(use-package consult
  :bind (("C-x b" . consult-buffer)))
#+end_src

** Completion Style (Orderless)

The orderless completion style allows typing parts of what is being matched,
separated by spaces. For example, "som thi" will match "this-is-some-thing".

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* Version Control

** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

Install latest version of transient, as the version included in Emacs is not recent enough.

#+begin_src emacs-lisp
(use-package transient)
#+end_src


* Startup Time

#+begin_src emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (let ((inhibit-message t))
              (message "Emacs init time: %s" (emacs-init-time)))))
#+end_src

